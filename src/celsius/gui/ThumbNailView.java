/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ThumbNailView.java
 *
 * Created on 03.04.2010, 14:08:44
 */

package celsius.gui;

import celsius.gui.CelsiusTable;
import celsius.data.Item;
import celsius.data.TableRow;
import java.awt.FlowLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

/**
 *
 * @author cnsaeman
 */
public class ThumbNailView extends javax.swing.JPanel implements TableModelListener, KeyListener {

    public int spx;
    public int spy;

    CelsiusTable DT;

    boolean updating;

    public int w;
    public int h;
    public int tx;
    public int ty;

    private final ArrayList<ThumbNail> Thumbs;

    /** Creates new form ThumbNailView */
    public ThumbNailView(CelsiusTable dt) {
        initComponents();
        jTNVPanel.setLayout(new WrapLayout(FlowLayout.LEFT));
        Thumbs=new ArrayList<ThumbNail>();
        DT=dt;
        addKeyListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTNVPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        jTNVPanel.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTNVPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void updateView() {
        updating=true; // #### is beeing called four times when changing categories?
        jTNVPanel.removeAll();
        Thumbs.clear();
        for (TableRow tableRow : DT.celsiusTableModel.tableRows) {
            if (Thumbs.size()<100) { // #### Temp restriction until threadexecutorpool really working
                ThumbNail TN=new ThumbNail(tableRow,DT);
                Thumbs.add(TN);
                jTNVPanel.add(TN);
            }
        }
        updating=false;
    }

    public void addItem(int i) {
        ThumbNail TN=new ThumbNail(DT.getRow(i),DT);
        Thumbs.add(i,TN);
        System.out.println("Adding "+DT.getRow(i));
        jTNVPanel.add(TN,i);
    }

    @Override
    public void remove(int i) {
        if (Thumbs.size()>i) Thumbs.remove(i);
        if (this.getComponentCount()>i) jTNVPanel.remove(i);
    }

    public void tableChanged(TableModelEvent e) {
        if (updating) return;
        if (!Thread.currentThread().getName().startsWith("AWT-Event")) return;
        updateView();
        /*if (!DT.tableview) {
            if (e.getType()==TableModelEvent.DELETE) {
                for (int i=e.getLastRow();i>=e.getFirstRow();i--) {
                    jTNVPanel.remove(i);
                }
            }
            if (e.getType()==TableModelEvent.INSERT) {
                System.out.println("INSERT NOT CAPUTRED");
            }
            if (e.getType()==TableModelEvent.UPDATE) {
                if (e.getLastRow()==-1) {
                    updateView();
                } else {
                    for (int i=e.getFirstRow();i<e.getLastRow()+1;i++) {
                        Thumbs.get(i).updateDoc(DT.getItem(i));
                    }
                }
            }
        }*/
    }

    public void modifySelection(int i,boolean extend) {
        boolean mod=false;
        if ((i==0) && (DT.selectedlast!=0)) {
            DT.selectedlast=0; mod=true;
        }
        if ((i==1000) && (DT.selectedlast!=DT.celsiusTableModel.tableRows.size()-1)) {
            DT.selectedlast=DT.celsiusTableModel.tableRows.size()-1; mod=true;
        }
        if ((i>0) && (i<999) && (DT.selectedlast<DT.celsiusTableModel.tableRows.size() - i+1)) {
            DT.selectedlast+=i; mod=true;
        }
        if ((i<0) && (DT.selectedlast>i-1)) {
            DT.selectedlast+=i; mod=true;
        }
        if (mod) {
            if (!extend) DT.selectedfirst = DT.selectedlast;
            if (DT.selectedlast > DT.selectedfirst) {
                DT.jtable.getSelectionModel().setSelectionInterval(DT.selectedfirst, DT.selectedlast);
            } else {
                DT.jtable.getSelectionModel().setSelectionInterval(DT.selectedlast, DT.selectedfirst);
            }
            adjustSelection();
        }
    }

    public void keyTyped(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == 36)
            modifySelection(0, e.isShiftDown());
        if (e.getKeyCode() == 37)
            modifySelection(-1,e.isShiftDown());
        if (e.getKeyCode() == 39)
            modifySelection(1,e.isShiftDown());
        if (e.getKeyCode() == 38)
            modifySelection(-tx,e.isShiftDown());
        if (e.getKeyCode() == 40)
            modifySelection(tx,e.isShiftDown());
        if (e.getKeyCode()==35) 
            modifySelection(1000,e.isShiftDown());
    }

    public void adjustSelection() {
        scrollRectToVisible(Thumbs.get(DT.selectedlast).getBounds());
        boolean mode=false;
        int b=DT.selectedfirst;
        int e=DT.selectedlast;
        if (b>e) {
            b=DT.selectedlast;
            e=DT.selectedfirst;
        }
        for (int i=0;i<Thumbs.size();i++) {
            if (i==b) mode=!mode;
            if (mode) Thumbs.get(i).setGrey();
            else Thumbs.get(i).setWhite();
            if (i==e) mode=!mode;
        }
    }

    public void update(Item doc) {
        int i=DT.celsiusTableModel.IDs.indexOf(doc.id);
        Thumbs.get(i).updateDoc(doc);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jTNVPanel;
    // End of variables declaration//GEN-END:variables

    public void clear() {
        jTNVPanel.removeAll();
    }

}
