/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditLibraryTemplates.java
 *
 * Created on 20.02.2010, 19:01:06
 */

package celsius.gui;

import celsius.data.KeyValueTableModel;
import celsius.data.Library;
import celsius.Resources;
import celsius.tools.FileTools;
import celsius.tools.Parser;
import celsius.tools.TextFile;
import celsius.tools.XMLHandler;
import celsius.tools.ToolBox;
import java.io.IOException;
import javax.swing.DefaultListModel;

/**
 *
 * @author cnsaeman
 */
public class EditLibraryTemplates extends javax.swing.JDialog {

    private final MainFrame MF;
    private final Resources RSC;
    private final DefaultListModel DLM;
    private KeyValueTableModel KVTM;
    private XMLHandler xml;

    /** Creates new form EditLibraryTemplates */
    public EditLibraryTemplates(MainFrame mf, Resources rsc) {
        super(mf, true);
        MF=mf;
        RSC=rsc;
        initComponents();
        DLM=new DefaultListModel();
        for (String s : RSC.libraryTemplates.keySet())
            DLM.addElement(s);
        xml=RSC.libraryTemplates.get("Default");
        jLTemplates.setModel(DLM);
        jLTemplates.setSelectedIndex(0);
        GUIToolBox.centerDialog(this,mf);
    }

    public void goToSelected() {
        String name=(String)jLTemplates.getSelectedValue();
        xml=RSC.libraryTemplates.get(name);
    }

    public void updateTable() {
        goToSelected();
        KVTM=new KeyValueTableModel("Property","Value");
        int j=jLTemplates.getSelectedIndex();
        for (String t : RSC.LibraryFields) {
            KVTM.addRow(Parser.lowerEndOfWords(t), xml.get(t));
        }
        jTLibTemplates.setModel(KVTM);
        jTLibTemplates.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTLibTemplates.getColumnModel().getColumn(0).setMaxWidth(150);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLTemplates = new javax.swing.JList();
        jBtnApply = new javax.swing.JButton();
        jBtnAdd = new javax.swing.JButton();
        jBtnDelete = new javax.swing.JButton();
        jBtnDone = new javax.swing.JButton();
        jCBHTMLtemplate = new javax.swing.JComboBox();
        jBtnEditHTMLtemplate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTLibTemplates = new javax.swing.JTable();
        jBtnEditStyleFile = new javax.swing.JButton();
        jBtnEditLibStructure = new javax.swing.JButton();
        jBtnEditLibRules = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Library Templates");

        jLTemplates.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jLTemplates.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLTemplatesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jLTemplates);

        jBtnApply.setText("Apply");
        jBtnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnApplyActionPerformed(evt);
            }
        });

        jBtnAdd.setText("Add");
        jBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddActionPerformed(evt);
            }
        });

        jBtnDelete.setText("Delete");
        jBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeleteActionPerformed(evt);
            }
        });

        jBtnDone.setText("Done");
        jBtnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDoneActionPerformed(evt);
            }
        });

        jCBHTMLtemplate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Document", "Person", "Category", "Multiple Documents", "Identifier search", "General search", "Keyword search", "Links tab", "Just added" }));

        jBtnEditHTMLtemplate.setText("Edit HTML template");
        jBtnEditHTMLtemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditHTMLtemplateActionPerformed(evt);
            }
        });

        jTLibTemplates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane2.setViewportView(jTLibTemplates);

        jBtnEditStyleFile.setText("Edit style file");
        jBtnEditStyleFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditStyleFileActionPerformed(evt);
            }
        });

        jBtnEditLibStructure.setText("Edit structure");
        jBtnEditLibStructure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditLibStructureActionPerformed(evt);
            }
        });

        jBtnEditLibRules.setText("Edit rules");
        jBtnEditLibRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditLibRulesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnDelete))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCBHTMLtemplate, 0, 122, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnEditHTMLtemplate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnEditStyleFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnApply))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnEditLibStructure)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnEditLibRules)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                        .addComponent(jBtnDone)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCBHTMLtemplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jBtnEditHTMLtemplate))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jBtnEditStyleFile)
                                .addComponent(jBtnApply))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnDone)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtnAdd)
                        .addComponent(jBtnDelete)
                        .addComponent(jBtnEditLibStructure)
                        .addComponent(jBtnEditLibRules)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnApplyActionPerformed
        goToSelected();
        boolean done;
        boolean changed=false;
        for (int i=0; i<RSC.LibraryFields.length;i++) {
            String value=(String)KVTM.getValueAt(i,1);
            if ((value!=null) && !value.equals(xml.get(RSC.LibraryFields[i]))) {
                done=false;
                if (RSC.LibraryFields[i].equals("name")) {
                    if (DLM.contains(value)) {
                        done=true;
                        RSC.showWarning("A library template with this name already exists.", "Cancelled...");
                        updateTable();
                    } else {
                        String oldname=xml.get("name");
                        xml.put("name", value);
                        DLM.setElementAt(value,jLTemplates.getSelectedIndex());
                        RSC.libraryTemplates.remove(oldname);
                        RSC.libraryTemplates.put(value, xml);
                        FileTools.deleteIfExists(xml.source);
                        xml.source="LibraryTemplates/"+Parser.cutProhibitedChars(value)+".xml";
                        done=true;
                        changed=true;
                    }
                }
                if (!done) {
                    xml.put(RSC.LibraryFields[i], value);
                    changed=true;
                }
            }
        }
        if (changed) {
            try {
                xml.writeBack();
            } catch (IOException ex) {
                RSC.outEx(ex);
            }
        }
    }//GEN-LAST:event_jBtnApplyActionPerformed

    /**
     * TODO check functionality and rewrite
     * 
     * @param evt 
     */
    private void jBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddActionPerformed
        if (RSC.libraryTemplates.get("New template")!=null) {
            RSC.showWarning("Please rename template called 'New template' first.", "Not possible:");
            return;
        }
        int i=RSC.askQuestionOC("This will create a new library template from the currently active library.", "Add a new library template");
        if (i==0) {
            DLM.addElement("New template");
            try {
                XMLHandler.Create("celsiusv2.2.librarytemplates", "LibraryTemplates/New template.xml");
                xml=new XMLHandler("LibraryTemplates/New template.xml");
                xml.put("name","New template");
            } catch (IOException e) {
                RSC.outEx(e);
            }
            RSC.libraryTemplates.put("New template",xml);
            Library Lib=RSC.getCurrentlySelectedLibrary();
            if (Lib!=null) {
                for (i=1;i<RSC.LibraryFields.length;i++) {
                    xml.put(RSC.LibraryFields[i], Lib.config.get(RSC.LibraryFields[i]));
                }
                /*String tmp=TextFile.ReadOutFile(Lib.completeDir(Lib.config.get("style"), ""));
                for (int j=0;j<8;j++) {
                    Lib.HTMLtemplates.goToFirst("infoMode", String.valueOf(j).trim());
                    xml.put("infoMode-"+String.valueOf(j).trim(),Lib.HTMLtemplates.get("template"));
                }
                xml.put("stylesheet",tmp);
                tmp=TextFile.ReadOutFile(Lib.completeDir("LD::librarystructure.xml", ""));
                xml.put("librarystructure",tmp);
                tmp=TextFile.ReadOutFile(Lib.completeDir("LD::rules.xml", ""));
                xml.put("libraryrules",tmp);
                try {
                    xml.writeBack();
                } catch (IOException ex) {
                    RSC.Msg1.printStackTrace(ex);
                    toolbox.Warning(this,"Error saving library templates.", "IOError:");
                }*/
            } else {
                RSC.showWarning("There is currently no library open.", "Cancelled...");
            }
        }
    }//GEN-LAST:event_jBtnAddActionPerformed

    private void jBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeleteActionPerformed
        int i=RSC.askQuestionYN("Do you really want to delete this library template?", "Please confirm:");
        if (i==0) {
            goToSelected();
            RSC.libraryTemplates.remove(xml.get("name"));
            FileTools.deleteIfExists(xml.source);
            i=jLTemplates.getSelectedIndex();
            jLTemplates.setSelectedIndex(0);
            DLM.removeElementAt(i);
        }
    }//GEN-LAST:event_jBtnDeleteActionPerformed

    private void jBtnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDoneActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jBtnDoneActionPerformed

    private void jLTemplatesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jLTemplatesValueChanged
        if (jLTemplates.getSelectedIndex()==0) {
            this.jBtnApply.setEnabled(false);
            this.jBtnDelete.setEnabled(false);
        } else {
            this.jBtnApply.setEnabled(true);
            this.jBtnDelete.setEnabled(true);
        }
        this.goToSelected();
        updateTable();
    }//GEN-LAST:event_jLTemplatesValueChanged

    private void jBtnEditHTMLtemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditHTMLtemplateActionPerformed
        goToSelected();
        String n="infoMode-"+String.valueOf(jCBHTMLtemplate.getSelectedIndex()).trim();
        String prev=xml.get(n);
        if (prev==null) prev="";
        MultiLineEditor MLE=new MultiLineEditor(RSC,"Edit HTML template for "+jCBHTMLtemplate.getSelectedItem(),prev);
        MLE.setVisible(true);
        if ((!MLE.cancel) && (jLTemplates.getSelectedIndex()!=0)) {
            xml.put(n, MLE.text);
            try {
                xml.writeBack();
            } catch (IOException ex) {
                RSC.outEx(ex);
                RSC.showWarning("Error saving library templates.", "IOError:");
            }
        } else {
            if (!MLE.cancel) RSC.showWarning("The default template cannot be modified.", "No changes applied");
        }
    }//GEN-LAST:event_jBtnEditHTMLtemplateActionPerformed

    private void jBtnEditStyleFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditStyleFileActionPerformed
        edit("stylesheet","Edit stylesheet");
    }//GEN-LAST:event_jBtnEditStyleFileActionPerformed

    private void jBtnEditLibStructureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditLibStructureActionPerformed
        edit("librarystructure","Edit structure");
    }//GEN-LAST:event_jBtnEditLibStructureActionPerformed

    private void jBtnEditLibRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditLibRulesActionPerformed
        edit("libraryrules","Edit structure");
    }//GEN-LAST:event_jBtnEditLibRulesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAdd;
    private javax.swing.JButton jBtnApply;
    private javax.swing.JButton jBtnDelete;
    private javax.swing.JButton jBtnDone;
    private javax.swing.JButton jBtnEditHTMLtemplate;
    private javax.swing.JButton jBtnEditLibRules;
    private javax.swing.JButton jBtnEditLibStructure;
    private javax.swing.JButton jBtnEditStyleFile;
    private javax.swing.JComboBox jCBHTMLtemplate;
    private javax.swing.JList jLTemplates;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTLibTemplates;
    // End of variables declaration//GEN-END:variables

    private void edit(String tag, String title) {
        goToSelected();
        String prev=xml.get(tag);
        if (prev==null) prev="";
        MultiLineEditor MLE=new MultiLineEditor(RSC,title,prev);
        MLE.setVisible(true);
        if (!MLE.cancel) {
            xml.put(tag, MLE.text);
            try {
                xml.writeBack();
            } catch (IOException ex) {
                RSC.outEx(ex);
                RSC.showWarning("Error saving library templates.", "IOError:");
            }
        }
    }

}
