/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package celsius.gui;

import celsius.Resources;
import celsius.data.Item;
import celsius.data.KeyValueTableModel;
import celsius.data.Library;
import celsius.data.PeopleListModelDetailed;
import celsius.data.Person;
import celsius.tools.Parser;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cnsaeman
 */
public class EditorPanel extends javax.swing.JPanel implements ListSelectionListener {

    private final Resources RSC;
    public Editable editable;
    public Library library;
    
    public final boolean writeBack;

    public final ArrayList<GuiEventListener> guiEventListeners;
    
    
    /**
     * Creates new form editorPanel
     */
    public EditorPanel(Resources rsc, boolean wB) {
        initComponents();        
        jTabEdit.getSelectionModel().addListSelectionListener(this);
        RSC=rsc;
        writeBack=wB;
        guiEventListeners=new ArrayList<>();
    }
    
    public void setEditable(Editable e) {
        editable=e;
        if (e!=null) {
            library = editable.getLibrary();
            jTabEdit.setModel(editable.getEditModel());
            jBtnEdit.setEnabled(false);
            jBtnNewRow.setEnabled(true);
            jBtnRemove.setEnabled(false);
        } else {
            jTabEdit.setModel(new KeyValueTableModel("Tag","Value"));
            jBtnEdit.setEnabled(false);
            jBtnNewRow.setEnabled(false);
            jBtnRemove.setEnabled(false);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTabEdit = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jBtnEdit = new javax.swing.JButton();
        jBtnNewRow = new javax.swing.JButton();
        jBtnRemove = new javax.swing.JButton();

        setName("Edit"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jTabEdit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTabEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabEditMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabEdit);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jBtnEdit.setText("Edit");
        jBtnEdit.setEnabled(false);
        jBtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditActionPerformed(evt);
            }
        });
        jPanel1.add(jBtnEdit);

        jBtnNewRow.setText("New Row");
        jBtnNewRow.setEnabled(false);
        jBtnNewRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnNewRowActionPerformed(evt);
            }
        });
        jPanel1.add(jBtnNewRow);

        jBtnRemove.setText("Remove Row");
        jBtnRemove.setEnabled(false);
        jBtnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(jBtnRemove);

        add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditActionPerformed
        editCurrentlySelectedKey();
    }//GEN-LAST:event_jBtnEditActionPerformed

    private void jBtnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRemoveActionPerformed
        removeCurrentlySelectedKey();
    }//GEN-LAST:event_jBtnRemoveActionPerformed

    private void jTabEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabEditMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            editCurrentlySelectedKey();
        }
    }//GEN-LAST:event_jTabEditMouseClicked

    private void jBtnNewRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnNewRowActionPerformed
        String key;
        MultiLineEditor MLE = new MultiLineEditor(RSC, "Edit new row name", "");
        MLE.setVisible(true);
        if (MLE.cancel) return;
        key=MLE.text.toLowerCase();
        if (!editable.containsKey(key)) {
            editable.put(key, "<unknown>");
        }
        KeyValueTableModel KVTM=editable.getEditModel();
        jTabEdit.setModel(KVTM);
        int row=KVTM.keys.indexOf(Parser.lowerEndOfWords(key));
        jTabEdit.setRowSelectionInterval(row, row);
        editCurrentlySelectedKey();
    }//GEN-LAST:event_jBtnNewRowActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnEdit;
    private javax.swing.JButton jBtnNewRow;
    private javax.swing.JButton jBtnRemove;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTabEdit;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(ListSelectionEvent lse) {
        if (lse.getValueIsAdjusting()) return;
        jBtnEdit.setEnabled(jTabEdit.getSelectedRow()>-1);
        jBtnRemove.setEnabled(jTabEdit.getSelectedRow()>-1);
    }
    
    public void editCurrentlySelectedKey() {
        String key=((String)jTabEdit.getModel().getValueAt(jTabEdit.getSelectedRow(),0));
        if (library.isPeopleField(key)) {
            // people editor for item
            Item item=(Item)editable;
            ArrayList<Person> people=new ArrayList<>();
            if (item.linkedPersons.get(key)!=null) {
                for (Person person : item.linkedPersons.get(key)) {
                    people.add(person);
                }
            }
            // init and show editor dialog
            PeopleListModelDetailed PLMD=new PeopleListModelDetailed(people);
            PeopleEditor peopleEditor=new PeopleEditor(RSC,PLMD);
            peopleEditor.setVisible(true);
            // check if information edited and save if necessary
            if ((!peopleEditor.cancelled) && (peopleEditor.modified)) {
                item.linkedPersons.put(key, peopleEditor.PLMD.people);
                // delete "<unknown>" entry, etc.
                editable.put(key,"");
                item.dirtyFields.add(key);
                writeBackIfNecessary();
                notifyChange(key);
            }
        } else if (library.isChoiceField(key)) {
            // choice editor
            ArrayList<String> choices=library.choiceFields.get(key);
            String value=editable.get(key);
            ChoiceEditor CE = new ChoiceEditor(RSC, "Edit choice", choices, value);
            CE.setVisible(true);
            if (!CE.cancel) {
                value=CE.selection;
                editable.put(key, value);
                writeBackIfNecessary();
                notifyChange(key);
            }
        } else {
            // standard text editor
            String value=editable.get(key);
            MultiLineEditor MLE = new MultiLineEditor(RSC, "Edit value", value);
            MLE.setVisible(true);
            if (!MLE.cancel) {
                value=MLE.text;
                if (value.equals("<unknown>")) value=null;
                editable.put(key, value);
                writeBackIfNecessary();
                notifyChange(key);
            }
        }
    }
    
    public void removeCurrentlySelectedKey() {
        final int i = RSC.askQuestionOC("Are you sure you want to delete the current key?", "Warning");
        if (i == JOptionPane.YES_OPTION) {
            String key=((String)jTabEdit.getModel().getValueAt(jTabEdit.getSelectedRow(),0));
            editable.put(key,null);
            writeBackIfNecessary();
        }
    }
    
    public void writeBackIfNecessary() {
        editable.updateShorts();
        jTabEdit.setModel(editable.getEditModel());
        if (writeBack) {
            editable.save();
            editable.notifyChanged();
        }
    }
    
    public void addChangeListener(GuiEventListener gEL) {
        guiEventListeners.add(gEL);
    }

    public void removeChangeListener(GuiEventListener gEL) {
        guiEventListeners.remove(gEL);
    }
    
    public void notifyChange(String key) {
        for (GuiEventListener gEL : guiEventListeners) {
            gEL.guiEventHappened("001", key);
        }
    }
    

}


