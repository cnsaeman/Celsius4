package celsius.gui;

import celsius.Resources;
import celsius.SwingWorkers.SWApplyPlugin;
import celsius.SwingWorkers.SWFinalizer;
import celsius.data.Library;
import celsius.data.TableRow;
import celsius.tools.HasManagedStates;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.ProgressMonitor;

/**
 *
 * @author cnsaeman
 */
public class PluginPanel extends javax.swing.JPanel implements HasManagedStates {
    
    public final Resources RSC;
    
    public int objectType;
    

    /**
     * Creates new form PluginPanel
     */
    public PluginPanel(Resources rsc) {
        RSC=rsc;
        objectType=-2;
        initComponents();
        RSC.guiStates.registerDirectlyEnabledComponent("mainFrame", "itemSelected", this);
        RSC.guiStates.registerDirectlyEnabledComponent("mainFrame", "tabAvailable", this);
        RSC.guiStates.registerDirectlyEnabledComponent("mainFrame", "librarySelected", this);
        RSC.guiStates.registerListener("mainFrame", this);
        jBtnApplyPluginSelected.setEnabled(false);
        jBtnApplyPluginTable.setEnabled(false);
        jBtnApplyPluginAll.setEnabled(false);
        
        jBMPlugins.setToolTipText("");
        jBMPlugins.setMargin(new java.awt.Insets(2, 2, 2, 2));
        setBorder(RSC.stdBorder());
    }
    
    public void adjustPluginList() {
        Library library=RSC.getCurrentlySelectedLibrary();
        if (library==null) {
            jLPlugins.setModel(new DefaultListModel());
        } else {
            CelsiusTable celsiusTable=RSC.getCurrentTable();
            if (celsiusTable == null) {
                jLPlugins.setModel(new DefaultListModel());
            } else {
                int ot=celsiusTable.getObjectType();
                if (objectType==ot) return;
                if (ot == -1) {
                    jLPlugins.setModel(new DefaultListModel());
                } else if (ot == 0) {
                    System.out.println("Set to model items");
                    jLPlugins.setModel(RSC.plugins.getPluginsDLM("manual-items", RSC.getCurrentlySelectedLibrary()));
                } else if (ot == 1) {
                    System.out.println("Set to model people");
                    jLPlugins.setModel(RSC.plugins.getPluginsDLM("manual-people", RSC.getCurrentlySelectedLibrary()));
                }
                objectType=ot;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLPlugins = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jBMPlugins = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jBtnApplyPluginSelected = new javax.swing.JButton();
        jBtnApplyPluginTable = new javax.swing.JButton();
        jBtnApplyPluginAll = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jLPlugins.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLPluginsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jLPlugins);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Currently available plugins:");

        jBMPlugins.setIcon(RSC.getScaledIcon(Resources.pluginSetupIcon));
        jBMPlugins.setMaximumSize(new java.awt.Dimension(60, 60));
        jBMPlugins.setMinimumSize(new java.awt.Dimension(6, 6));
        jBMPlugins.setPreferredSize(new java.awt.Dimension(RSC.guiScale(25),RSC.guiScale(25)));
        jBMPlugins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMPluginsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jBMPlugins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBMPlugins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jLabel2.setText("Apply to:");
        jPanel2.add(jLabel2);

        jBtnApplyPluginSelected.setText("selected");
        jBtnApplyPluginSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnApplyPluginSelectedActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnApplyPluginSelected);

        jBtnApplyPluginTable.setText("table");
        jBtnApplyPluginTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnApplyPluginTableActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnApplyPluginTable);

        jBtnApplyPluginAll.setText("all");
        jBtnApplyPluginAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnApplyPluginAllActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnApplyPluginAll);

        add(jPanel2, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jBMPluginsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMPluginsActionPerformed
        (new EditLibraryPlugins(RSC.MF,RSC.getCurrentlySelectedLibrary())).setVisible(true);
    }//GEN-LAST:event_jBMPluginsActionPerformed

    private void jLPluginsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jLPluginsValueChanged
        adjustStates();
    }//GEN-LAST:event_jLPluginsValueChanged

    private void jBtnApplyPluginSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnApplyPluginSelectedActionPerformed
        if (jLPlugins.getSelectedIndex() == -1) return;
        CelsiusTable IT=RSC.getCurrentTable();
        if (IT == null) return;
        RSC.MF.setThreadMsg("Working...");
        ArrayList<TableRow> tableRows=IT.getSelectedRows();
        ProgressMonitor progressMonitor = new ProgressMonitor(this, "Applying plugin to items ...", "", 0, tableRows.size());
        String pluginName=(String)jLPlugins.getSelectedValue();
        SWApplyPlugin swAP = new SWApplyPlugin(IT.library, RSC, progressMonitor, RSC.plugins.get(pluginName), "", tableRows);
        swAP.swFinalizer=new SWFinalizer() {
                public void finalize(HashMap<String,String> communication, StringBuffer buf) {
                    RSC.MF.setThreadMsg("Done.");
                    RSC.MF.guiInfoPanel.updateGUI();
                    RSC.getCurrentTable().jtable.requestFocus();
            }
        };
        swAP.execute();
    }//GEN-LAST:event_jBtnApplyPluginSelectedActionPerformed

    private void jBtnApplyPluginTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnApplyPluginTableActionPerformed
        if (jLPlugins.getSelectedIndex() == -1) return;
        CelsiusTable IT=RSC.getCurrentTable();
        if (IT == null) return;
        RSC.MF.setThreadMsg("Working...");
        ArrayList<TableRow> tableRows=IT.celsiusTableModel.tableRows;
        ProgressMonitor progressMonitor = new ProgressMonitor(this, "Applying plugin to items ...", "", 0, tableRows.size());
        String pluginName=(String)jLPlugins.getSelectedValue();
        SWApplyPlugin swAP = new SWApplyPlugin(IT.library, RSC, progressMonitor, RSC.plugins.get(pluginName), "", tableRows);
        swAP.swFinalizer=new SWFinalizer() {
                public void finalize(HashMap<String,String> communication, StringBuffer buf) {
                    RSC.MF.setThreadMsg("Done.");
                    RSC.MF.guiInfoPanel.updateGUI();
                    RSC.getCurrentTable().jtable.requestFocus();
            }
        };
        swAP.execute();
    }//GEN-LAST:event_jBtnApplyPluginTableActionPerformed

    private void jBtnApplyPluginAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnApplyPluginAllActionPerformed
        if (jLPlugins.getSelectedIndex() == -1) return;
        CelsiusTable IT=RSC.getCurrentTable();
        if (IT == null) return;
        RSC.MF.setThreadMsg("Working...");
        ArrayList<TableRow> tableRows=IT.getSelectedRows();
        ProgressMonitor progressMonitor = new ProgressMonitor(this, "Applying plugin to items ...", "", 0, RSC.getCurrentlySelectedLibrary().getSize());
        progressMonitor.setMillisToDecideToPopup(0);
        progressMonitor.setMillisToPopup(0);
        String pluginName=(String)jLPlugins.getSelectedValue();
        SWApplyPlugin swAP = new SWApplyPlugin(IT.library, RSC, progressMonitor, RSC.plugins.get(pluginName), "", (ArrayList<TableRow>)null);
        swAP.swFinalizer=new SWFinalizer() {
                public void finalize(HashMap<String,String> communication, StringBuffer buf) {
                    RSC.MF.setThreadMsg("Done.");
                    RSC.MF.guiInfoPanel.updateGUI();
                    RSC.getCurrentTable().jtable.requestFocus();
            }
        };
        swAP.execute();
    }//GEN-LAST:event_jBtnApplyPluginAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jBMPlugins;
    private javax.swing.JButton jBtnApplyPluginAll;
    private javax.swing.JButton jBtnApplyPluginSelected;
    private javax.swing.JButton jBtnApplyPluginTable;
    private javax.swing.JList<String> jLPlugins;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void setModel(DefaultListModel pluginsDLM) {
        jLPlugins.setModel(pluginsDLM);
    }

    @Override
    public void adjustStates() {
        if (jLPlugins.getSelectedIndex()>-1) {
            jBtnApplyPluginSelected.setEnabled(RSC.guiStates.getState("mainFrame", "itemSelected") || RSC.guiStates.getState("mainFrame", "personSelected"));
            jBtnApplyPluginTable.setEnabled(RSC.guiStates.getState("mainFrame", "tabAvailable"));
            jBtnApplyPluginAll.setEnabled(RSC.guiStates.getState("mainFrame", "librarySelected"));
        } else {
            jBtnApplyPluginSelected.setEnabled(false);
            jBtnApplyPluginTable.setEnabled(false);
            jBtnApplyPluginAll.setEnabled(false);
        }
    }
}
