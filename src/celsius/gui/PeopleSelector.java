package celsius.gui;

import celsius.Resources;
import celsius.data.PeopleListModel;
import atlantis.tools.Parser;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author cnsaeman
 */
public class PeopleSelector extends javax.swing.JPanel implements DocumentListener, KeyListener {

    public final int SHOW_ITEMS=1; // even type for need to show items
    public final int ENTER_PRESSED=2; // enter pressed, reaction necessary
    public final int NAME_SELECTED=3; // enter pressed, reaction necessary
    
    public final Resources RSC;
    private final ClearEdit jCE2;
    private final ArrayList<GenericCelsiusEventListener> listeners;
    
    public String selectedIDs;
    public String name;
    
    /**
     * Creates new form PeopleSelector.
     * 
     * @param RSC
     */
    public PeopleSelector(Resources RSC) {
        this.RSC=RSC;
        initComponents();
        setBorder(RSC.stdBorder());
        jCE2=new ClearEdit(RSC,"Enter a person (CTRL+P)");
        jCE2.getDocument().addDocumentListener(this);
        jCE2.addKeyTypedListener(this);
        add(jCE2, java.awt.BorderLayout.NORTH);       
        listeners=new ArrayList<>();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLSearchPeopleLastName = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLSearchPeopleFirstNames = new javax.swing.JList<>();

        setBackground(new java.awt.Color(241, 239, 239));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 10, 10));

        jLSearchPeopleLastName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLSearchPeopleLastNameMouseClicked(evt);
            }
        });
        jLSearchPeopleLastName.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLSearchPeopleLastNameValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jLSearchPeopleLastName);

        jPanel1.add(jScrollPane1);

        jLSearchPeopleFirstNames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLSearchPeopleFirstNamesMouseClicked(evt);
            }
        });
        jLSearchPeopleFirstNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLSearchPeopleFirstNamesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jLSearchPeopleFirstNames);

        jPanel1.add(jScrollPane2);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jLSearchPeopleLastNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLSearchPeopleLastNameMouseClicked
        if (!(evt.getButton() == MouseEvent.BUTTON1)) return;
        adjustPeopleSearchFirstNames();
    }//GEN-LAST:event_jLSearchPeopleLastNameMouseClicked

    private void jLSearchPeopleLastNameValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jLSearchPeopleLastNameValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }
        adjustPeopleSearchFirstNames();
    }//GEN-LAST:event_jLSearchPeopleLastNameValueChanged

    private void jLSearchPeopleFirstNamesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jLSearchPeopleFirstNamesValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }
        fireEvent(new GenericCelsiusEvent(this,SHOW_ITEMS));
    }//GEN-LAST:event_jLSearchPeopleFirstNamesValueChanged

    private void jLSearchPeopleFirstNamesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLSearchPeopleFirstNamesMouseClicked
        if (!(evt.getButton() == MouseEvent.BUTTON1)) {
            return;
        }
        if (evt.getClickCount() == 2) {
            fireEvent(new GenericCelsiusEvent(this,NAME_SELECTED));
        }
        fireEvent(new GenericCelsiusEvent(this,SHOW_ITEMS));
    }//GEN-LAST:event_jLSearchPeopleFirstNamesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> jLSearchPeopleFirstNames;
    private javax.swing.JList<String> jLSearchPeopleLastName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    public synchronized void addEventListener(GenericCelsiusEventListener listener) {
        listeners.add(listener);
    }

    public synchronized void removeEventListener(GenericCelsiusEventListener listener) {
        listeners.remove(listener);
    }
    
    // call this method whenever you want to notify
    //the event listeners of the particular event
    private synchronized void fireEvent(GenericCelsiusEvent evt) {
        for (GenericCelsiusEventListener listener : listeners) {
            listener.genericEventOccured(evt);
        }
    }
    
    private void adjustPeopleSearchFirstNames() {
        DefaultListModel DLM=((PeopleListModel)jLSearchPeopleLastName.getModel()).getFirstNameModel(jLSearchPeopleLastName.getSelectedIndices());
        jLSearchPeopleFirstNames.setModel(DLM);
        fireEvent(new GenericCelsiusEvent(this,SHOW_ITEMS));
    }

    @Override
    public void requestFocus() {
        jCE2.selectAll();
        jCE2.requestFocus();
    }
    
    @Override
    public void setEnabled(boolean state) {
        jCE2.setEnabled(state);
        jLSearchPeopleLastName.setEnabled(state);
        jLSearchPeopleFirstNames.setEnabled(state);
    }
    
    public void keyPressed(DocumentEvent e) {
        if (e.getDocument().equals(jCE2.getDocument())) performPeopleSearch();
    }

    @Override
    public void insertUpdate(DocumentEvent de) {
        keyPressed(de);
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        keyPressed(de);
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        keyPressed(de);
    }

    @Override
    public void keyTyped(KeyEvent evt) {
        if (evt.getComponent()==jCE2.getTF()) {
            if (evt.isAltDown()) {
                return;
            }
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                if (RSC.MF.searchState == 1) {
                    fireEvent(new GenericCelsiusEvent(this,ENTER_PRESSED));
                } else {
                    jLSearchPeopleLastName.setSelectedIndex(0);
                    RSC.MF.searchState = 1;
                }
            } else {
                RSC.MF.searchState = 0;
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent ke) {
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }
    
    public void readOutData() {
        selectedIDs="";
        name="";
        int[] ids1=jLSearchPeopleLastName.getSelectedIndices();
        int[] ids2=jLSearchPeopleFirstNames.getSelectedIndices();
        if (ids1.length<1) return;
        PeopleListModel PLM=(PeopleListModel)jLSearchPeopleLastName.getModel();
        if (!PLM.containsData) return;
        StringBuilder ids=new StringBuilder();
        name="Multiple people";
        if (ids1.length==1) name=PLM.lastNames.get(ids1[0]);
        if (ids2.length==1) name+=", "+jLSearchPeopleFirstNames.getSelectedValue();
        for (int i : ids1) {
            String lastName=PLM.lastNames.get(i);
            // only last name selected
            if (ids2.length==0) {
                for (String firstName : PLM.lookUp.get(lastName).keySet()) {
                    ids.append(',');
                    ids.append(PLM.lookUp.get(lastName).get(firstName));
                }
            } else {
                // also first names selected
                for (int j : ids2) {
                    String firstName=(String)jLSearchPeopleFirstNames.getModel().getElementAt(j);
                    if (PLM.lookUp.get(lastName).containsKey(firstName)) {
                        ids.append(',');
                        ids.append(PLM.lookUp.get(lastName).get(firstName));
                    }
                }
            }
        }
        if (ids.length()==0) ids.append(',');
        selectedIDs=ids.substring(1);
    }
    
    public void performPeopleSearch() {
        String search = Parser.normalizeForSearch(jCE2.getText());
        PeopleListModel PLM=new PeopleListModel();
        if (search.length()>1) {
            try {
                PLM=new PeopleListModel(RSC.getCurrentlySelectedLibrary(),"SELECT group_concat(id,'|'), last_name, group_concat(first_name,'|') FROM (SELECT id, last_name, first_name FROM persons WHERE search LIKE ? ORDER BY last_name ASC, first_name ASC) GROUP BY last_name;", "%"+search+"%");
            } catch (Exception ex) {
                RSC.outEx(ex);
            }
        }
        jLSearchPeopleLastName.setModel(PLM);
        jLSearchPeopleFirstNames.setModel(new DefaultListModel());
    }
    
    public void updateModel() {
        PeopleListModel PLM=(PeopleListModel) jLSearchPeopleLastName.getModel();
        PLM.loadData();
        jLSearchPeopleFirstNames.setModel(PLM.getFirstNameModel(jLSearchPeopleLastName.getSelectedIndices()));
    }
    
    public String getSelectedLastNameIDs() {
        StringBuilder ids=new StringBuilder();
        PeopleListModel PLM=(PeopleListModel) jLSearchPeopleLastName.getModel();
        for (String lastName : (List<String>)jLSearchPeopleLastName.getSelectedValuesList()) {
            for (String firstName : PLM.lookUp.get(lastName).keySet()) {
                ids.append(',');
                ids.append(PLM.lookUp.get(lastName).get(firstName));
            }
        }
        if (ids.length()>0) {
            return(ids.substring(1));
        } else {
            return("");
        }
    }

    String getSelectedPersonIDs() {
        List<String> firstNames = (List<String>) jLSearchPeopleFirstNames.getSelectedValuesList();
        if (firstNames.isEmpty()) return(getSelectedLastNameIDs());
        StringBuilder ids = new StringBuilder();
        PeopleListModel PLM = (PeopleListModel) jLSearchPeopleLastName.getModel();
        for (String lastName : (List<String>) jLSearchPeopleLastName.getSelectedValuesList()) {
            for (String firstName : PLM.lookUp.get(lastName).keySet()) {
                if (firstNames.contains(firstName)) {
                    ids.append(',');
                    ids.append(PLM.lookUp.get(lastName).get(firstName));
                }
            }
        }
        if (ids.length()>0) {
            return(ids.substring(1));
        } else {
            return("");
        }
    }
    
}
