import java.util.ArrayList;
import java.util.HashMap;
import celsius.tools.Parser;
import celsius.tools.TextFile;
import celsius.tools.toolbox;


public class PluginGPX extends Thread {

    public static final HashMap<String,String> metaData=new HashMap<String,String>() {
        {
            put("title"             ,"Export GPX");
            put("author"            ,"Christian Saemann");
            put("version"           ,"1.0");
            put("help"              ,"This plugin creates a GPX file out of the selected geoaches.");
            put("needsFirstPage"    ,"no");
            put("longRunTime"       ,"no");
            put("requiredFields"    ,"bibtex");
            put("type"              ,"export");
            put("defaultParameters" ,"");
            put("parameter-help"    ,"none.");
            put("finalize"          ,"yes");
        }
    };

    public final static String linesep = System.getProperty("line.separator");  // EndOfLine signal
    public double minlat,minlon,maxlat,maxlon;
    public celsius.MProperties Information;
    public ArrayList<String> Msgs;

    public void Initialize(celsius.MProperties i, ArrayList<String> m) {
        Information = i;
        Msgs = m;
        if (Information.containsKey("$$keep-minlat")) {
            minlat=Double.valueOf(Information.get("$$keep-minlat"));
            maxlat=Double.valueOf(Information.get("$$keep-maxlat"));
            minlon=Double.valueOf(Information.get("$$keep-minlon"));
            maxlon=Double.valueOf(Information.get("$$keep-maxlon"));
        }
    }

    public void run() {
        String output=new String("");
        if (Information.containsKey("$$finalize")) {
            String out=header;
            out=Parser.Substitute(out,"$$minlat$$",String.valueOf(minlat));
            out=Parser.Substitute(out,"$$maxlat$$",String.valueOf(maxlat));
            out=Parser.Substitute(out,"$$minlon$$",String.valueOf(minlon));
            out=Parser.Substitute(out,"$$maxlon$$",String.valueOf(maxlon));
            Information.put("output",out+Information.get("$$keep-output")+"\n</gpx>");
            return;
        } else {
            if (!Information.containsKey("$$keep-output")) {
                Information.put("$$keep-output","");
            }
            double lat=Double.valueOf(Information.get("lat"));
            double lon=Double.valueOf(Information.get("lon"));
            if (Information.containsKey("$$keep-minlat")) {
                if (lat>maxlat) Information.put("$$keep-maxlat", String.valueOf(lat));
                if (lon>maxlon) Information.put("$$keep-maxlon", String.valueOf(lon));
                if (lat<minlat) Information.put("$$keep-minlat", String.valueOf(lat));
                if (lon<minlon) Information.put("$$keep-minlon", String.valueOf(lon));
            } else {
                Information.put("$$keep-maxlat", String.valueOf(lat));
                Information.put("$$keep-maxlon", String.valueOf(lon));
                Information.put("$$keep-minlat", String.valueOf(lat));
                Information.put("$$keep-minlon", String.valueOf(lon));
            }
            String xml=Information.get("original-xml");
            if ((xml!=null) && (xml.length()>2)) {
                output="\n"+xml;
            } else {
                output="\n<wpt  lat=\""+Information.get("lat")+"\" lon=\""+Information.get("lon")+"\">\n" +
                        "<name>"+Information.get("cache-id")+"</name>\n" +
                        "<desc>"+Information.get("name")+"</desc>\n";
                if (Information.containsKey("url")) {
                    output+="<url>"+Information.get("url")+"</url>\n" +
                            "<urlname>"+Information.get("urlname")+"</urlname>\n";
                }
                output+="<sym>Geocache</sym>\n" +
                        "<type>Geocache|"+Information.get("type")+"</type>\n" +
                        "</wpt>";
            }
        }
        Information.put("$$keep-output", Information.get("$$keep-output")+output);
    }

    public static final String header="<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
            +"<gpx xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" version=\"1.0\" creator=\"Groundspeak Pocket Query\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.groundspeak.com/cache/1/0 http://www.groundspeak.com/cache/1/0/cache.xsd\" xmlns=\"http://www.topografix.com/GPX/1/0\">\n"
            +"<name>Exported Caches</name>\n"
            +"<desc>Geocache file generated by the Celsius Library System</desc>\n"
            +"<author>Celsius Library System</author>\n"
            +"<email>celsius@christiansaemann.de</email>\n"
            +"<time>2010-06-18T11:27:31.8262161Z</time>\n"
            +"<keywords>cache, geocache, groundspeak</keywords>\n"
            +"<bounds minlat=\"$$minlat$$\" minlon=\"$$minlon$$\" maxlat=\"$$maxlat$$\" maxlon=\"$$maxlon$$\" />";
}
